# Dockerfile para produção - Chatwoot Customizado
# Multi-stage build otimizado para deploy em VPS

# Stage 1: Pre-build dependencies
FROM node:23-alpine AS node
FROM ruby:3.4.4-alpine3.21 AS pre-builder

ARG NODE_VERSION="23.7.0"
ARG PNPM_VERSION="10.2.0"
ENV NODE_VERSION=${NODE_VERSION}
ENV PNPM_VERSION=${PNPM_VERSION}

# Production settings
ARG BUNDLE_WITHOUT="development:test"
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096 --openssl-legacy-provider"
ENV BUNDLE_PATH="/gems"

# Install system dependencies
RUN apk update && apk add --no-cache \
  openssl \
  tar \
  build-base \
  tzdata \
  postgresql-dev \
  postgresql-client \
  git \
  curl \
  xz \
  vips \
  imagemagick \
  && mkdir -p /var/app \
  && gem install bundler

# Copy Node.js from official image
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
  && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

# Install pnpm
RUN npm install -g pnpm@${PNPM_VERSION}
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

WORKDIR /app

# Copy dependency files
COPY Gemfile Gemfile.lock ./
COPY package.json pnpm-lock.yaml ./

# Configure bundle for Alpine Linux
RUN apk add --no-cache musl ruby-full ruby-dev gcc make musl-dev linux-headers
RUN bundle config set --local force_ruby_platform true

# Install Ruby dependencies
RUN bundle config set without 'development test' && \
    bundle install -j 4 -r 3

# Install Node dependencies
RUN pnpm i

# Copy application code
COPY . /app

# Create log directory
RUN mkdir -p /app/log

# Precompile assets
RUN SECRET_KEY_BASE=precompile_placeholder \
    RAILS_LOG_TO_STDOUT=enabled \
    bundle exec rake assets:precompile && \
    rm -rf spec node_modules tmp/cache

# Generate git SHA for version tracking
RUN if [ -d .git ]; then git rev-parse HEAD > /app/.git_sha; else echo "custom-build-$(date +%Y%m%d)" > /app/.git_sha; fi

# Clean up
RUN rm -rf /gems/ruby/3.4.0/cache/*.gem && \
    find /gems/ruby/3.4.0/gems/ \( -name "*.c" -o -name "*.o" \) -delete && \
    rm -rf .git .gitignore

# Stage 2: Final production image
FROM ruby:3.4.4-alpine3.21

ARG NODE_VERSION="23.7.0"
ENV NODE_VERSION=${NODE_VERSION}
ENV BUNDLER_VERSION=2.5.11
ENV BUNDLE_WITHOUT="development:test"
ENV EXECJS_RUNTIME="Disabled"
ENV RAILS_SERVE_STATIC_FILES=true
ENV BUNDLE_FORCE_RUBY_PLATFORM=1
ENV RAILS_ENV=production
ENV BUNDLE_PATH="/gems"

# Install runtime dependencies
RUN apk update && apk add --no-cache \
  openssl \
  tzdata \
  postgresql-client \
  imagemagick \
  vips \
  && gem install bundler

# Copy Node.js
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules

# Copy application and gems from pre-builder
COPY --from=pre-builder /gems/ /gems/
COPY --from=pre-builder /app /app

WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 chatwoot && \
    adduser -D -u 1001 -G chatwoot chatwoot && \
    chown -R chatwoot:chatwoot /app

USER chatwoot

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Default command
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-p", "3000"]